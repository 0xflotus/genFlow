/***
 * Copyright 2004-present Facebook. All Rights Reserved.
 */

let www =
  Filename.(
    dirname(
      dirname(dirname(dirname(dirname(dirname(Sys.executable_name))))),
    )
  );

let outputDir =
  Filename.(
    List.fold_left(
      concat,
      www,
      ["html", "js", "regen", "__generated_flow__"],
    )
  );

let outputDirLib =
  Filename.(
    List.fold_left(
      concat,
      www,
      ["html", "lib", "bs", "js", "regen", "__generated_flow__"],
    )
  );

let cmtDirList = [
  Filename.(List.fold_left(concat, www, ["html", "lib", "bs"])),
  Filename.(List.fold_left(concat, www, ["html", "lib", "bs", "intern"])),
];

let createModulesMap = modulesMapFile =>
  switch (modulesMapFile) {
  | None => GenFlowMain.StringMap.empty
  | Some(filePath) =>
    let s = FBCore.IO.readFile(filePath);
    FBString.split("\n", s)
    |> Array.fold_left(
         (map, nextPairStr) =>
           if (nextPairStr != "") {
             let fromTo = FBString.split("=", nextPairStr);
             assert(Array.length(fromTo) === 2);
             let k: string = fromTo[0];
             let v: string = fromTo[1];
             GenFlowMain.StringMap.add(k, v, map);
           } else {
             map;
           },
         GenFlowMain.StringMap.empty,
       );
  };

let buildWWW = () => {
  print_endline("Rebuilding Reason source files");
  let commandLocation =
    Filename.(List.fold_left(concat, www, ["scripts", "re", "build-www"]));
  let exitCode = Sys.command(commandLocation);
  switch (exitCode) {
  | 0 => ()
  | _ =>
    print_endline("  > Running `" ++ commandLocation ++ "`");
    print_endline("  > If it fails you must manually run the above command");
    print_endline("  > Try using the `-clean` option if it keeps failing");
    print_endline("  > More information https://fburl.com/ldkzl04c");
    failwith(
      "Error rebuilding Reason source files. Check stderr for more details",
    );
  };
};

let buildWWWGenerated = () => {
  print_endline("Rebuilding Reason generated files");
  let commandLocation =
    Filename.(
      List.fold_left(concat, www, ["scripts", "re", "build-www-generated"])
    );
  let exitCode = Sys.command(commandLocation);
  switch (exitCode) {
  | 0 => ()
  | _ =>
    print_endline("  > Running `" ++ commandLocation ++ "`");
    print_endline("  > If it fails you must manually run the above command");
    print_endline("  > Try using the `-clean` option if it keeps failing");
    print_endline("  > More information https://fburl.com/ldkzl04c");
    failwith(
      "Error rebuilding Reason generated files. Check stderr for more details",
    );
  };
};

let findCmtFiles = () => {
  cmtDirList |> List.iter(FBCore.IO.mkdirp);
  let files =
    FBCore.Find.filesParallel(
      ~name="*.cmt",
      ~prune=[outputDirLib],
      cmtDirList,
    );
  FBCore.Find.filesContainingParallel(files, "genFlow");
};

let fileHeader = {
  let header = [
    "/**",
    " * Copyright 2004-present Facebook. All Rights Reserved.",
    " *",
    " * This is a generated file. To modify it see in-line comments about",
    " * which files are used to generate parts of this file. Then run:",
    " *",
    " *     `scripts/re/gen-from-reason/run`",
    " *",
    " * @this_genFlow_file_is_strictly_safe__do_not_write_this_by_hand",
    " *",
    " * " ++ FB.SignedSource.signingToken,
    " */",
    "",
  ];
  String.concat("\n", header);
};

let start = FBCore.Timer.start();

FBCore.CLI.(
  program("gen-from-reason")
  |> version("1.0.0")
  |> description(
       "Turns Reason modules with "
       ++ GenFlowMain.Generator.tagSearch
       ++ " attributes into idiomatic JS"
       ++ " APIs, with Flow types annotated on its output.",
     )
  |> option(
       "--modulesMap",
       "Specify map file to override the JS module resolution for dependencies that would"
       ++ " normally be generated by genFlow but are not available for whatever reason."
       ++ " Example(--modulesMap map.txt) where each line is of the form 'ModuleFlow.bs=SomeShim'. "
       ++ "E.g. 'ReasonReactFlow.bs=ReasonReactShim'.",
       Optional(String),
     )
  |> action(({log, options}) => {
       let modulesMap =
         createModulesMap(options.optionalString("--modulesMap"));
       GenFlowMain.run(
         ~outputDir,
         ~fileHeader,
         ~signFile=FB.SignedSource.sign,
         ~modulesMap,
         ~findCmtFiles,
         ~buildSourceFiles=buildWWW,
         ~buildGeneratedFiles=buildWWWGenerated,
       );
       log.info("Done in: " ++ FBCore.Timer.elapsed(start, Seconds(3)));
     })
  |> parseAndRun(Sys.argv)
);
