/**
 * This is file generated by genFlow. Do not modify.
 *
 * @flow strict
 * @nolint
 */

// Generated by BUCKLESCRIPT VERSION 4.0.1, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Component1 = require("../Component1.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

import type {ComponentSpec as ReasonReactComponentSpec} from '../shims/ReasonReactFlowShim'
;

import type {Stateless as ReasonReactStateless} from '../shims/ReasonReactFlowShim'
;

import type {NoRetainedProps as ReasonReactNoRetainedProps} from '../shims/ReasonReactFlowShim'
;

import type {Actionless as ReasonReactActionless} from '../shims/ReasonReactFlowShim'
;

import type {Component as ReactComponent} from 'React'
;

// No need to import locally visible type TwoVariants. Make sure it is also marked with @genFlow
;

export opaque type TwoVariantsA = any // Reason type already checked. Making it opaque
;

export opaque type TwoVariantsB = any // Reason type already checked. Making it opaque
;

function b(argA) {
  return /* B */Block.__(0, [argA]);
}

export opaque type TwoVariantsC = any // Reason type already checked. Making it opaque
;

function c(argB) {
  return /* C */Block.__(1, [argB === (null) ? undefined : argB]);
}

export type TwoVariants =
  | TwoVariantsA
  | TwoVariantsB
  | TwoVariantsC
;

function concat(argC, argD) {
  return Component1.concat(argC, argD === (null) ? undefined : argD);
}

export type Props = {|message?:string|}
;

var component = ReasonReact.wrapReasonForJs(Component1.component, (function (jsProps) {
        var argF = jsProps.children;
        return Component1.make(jsProps.message, argF);
      }));


var consumeTwoVariants = Component1.consumeTwoVariants;


var a = /* A */0;





var plus = Component1.plus;


exports.consumeTwoVariants = (consumeTwoVariants : (TwoVariants) => number);
exports.a = (a : TwoVariantsA);
exports.b = (b : (number) => TwoVariantsB);
exports.c = (c : (?number) => TwoVariantsC);
exports.concat = (concat : (string, ?string) => ?string);
exports.plus = (plus : <T10970>(number, T10970) => number);
exports.component = (component : React$ComponentType<Props>);
/*  Not a pure module */
